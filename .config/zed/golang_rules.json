{
  "rules": [
    {
      "name": "package_organization",
      "description": "Organize packages according to Go best practices",
      "guidelines": [
        "Package names should be short, concise, and lowercase (e.g., 'http', 'io')",
        "Use singular form for package names (e.g., 'time', not 'times')",
        "Avoid underscores in package names",
        "Package names should match their directory names",
        "Group related functionality in the same package",
        "Organize code by domain functionality, not by layer",
        "Follow the standard Go project layout (cmd/, pkg/, internal/)",
        "Use internal/ for private packages that shouldn't be imported by other projects",
        "Use cmd/ for main applications entry points",
        "Use pkg/ for code meant to be used by external applications",
        "Keep main packages as small as possible, with logic in importable packages"
      ],
      "example": "project/\n├── cmd/         # Command-line applications\n│   ├── api/     # The API server\n│   │   └── main.go\n│   └── worker/  # The background worker\n│       └── main.go\n├── internal/    # Private libraries\n│   ├── auth/    # Authentication package\n│   └── db/      # Database interactions\n└── pkg/         # Public libraries\n    └── models/   # Data models"
    },
    {
      "name": "naming_conventions",
      "description": "Follow Go's established naming conventions",
      "guidelines": [
        "Use camelCase for internal or unexported names",
        "Use PascalCase for exported names (visible outside the package)",
        "Use all UPPERCASE for constants only when they're truly constant",
        "Acronyms should be all uppercase (e.g., 'HTTP', 'URL', 'ID')",
        "Getter methods should not use 'Get' prefix (e.g., 'user.Name()', not 'user.GetName()')",
        "Interface names should use '-er' suffix when representing a single action (e.g., 'Reader', 'Writer')",
        "Variable names should be short in small scopes, more descriptive in larger scopes",
        "Be consistent with naming patterns for similar concepts",
        "Test functions should be named 'Test' + function name (e.g., 'TestConnect')",
        "Benchmark functions should be named 'Benchmark' + function name"
      ],
      "example": "// Good naming examples\nconst (\n    MaxConnections = 100\n    DefaultTimeout = 30 * time.Second\n)\n\ntype UserService interface {\n    Create(user *User) error\n    FindByID(id string) (*User, error)\n    Update(user *User) error\n}\n\nfunc (u *User) Name() string {\n    return u.name\n}\n\nfunc TestConnect(t *testing.T) {\n    // Test code\n}"
    },
    {
      "name": "code_organization",
      "description": "Structure code for readability and maintainability",
      "guidelines": [
        "Organize functions in a file from high-level to low-level",
        "Group related functions together",
        "Keep functions focused on a single responsibility",
        "Limit function length (aim for < 50 lines)",
        "Limit parameter count (aim for ≤ 3 parameters)",
        "Use meaningful parameter and return value names in function declarations",
        "Prefer composition over inheritance",
        "Use structs to group related data",
        "Keep exported API surface minimal",
        "Don't export functions or types solely for testing",
        "Use function options pattern for functions with many optional parameters"
      ],
      "example": "// Function options pattern example\ntype ServerOptions struct {\n    Port int\n    Host string\n    ReadTimeout time.Duration\n    WriteTimeout time.Duration\n}\n\ntype ServerOption func(*ServerOptions)\n\nfunc WithPort(port int) ServerOption {\n    return func(o *ServerOptions) {\n        o.Port = port\n    }\n}\n\nfunc WithHost(host string) ServerOption {\n    return func(o *ServerOptions) {\n        o.Host = host\n    }\n}\n\nfunc NewServer(options ...ServerOption) *Server {\n    opts := ServerOptions{\n        Port: 8080,\n        Host: \"localhost\",\n        ReadTimeout: 30 * time.Second,\n        WriteTimeout: 30 * time.Second,\n    }\n    \n    for _, option := range options {\n        option(&opts)\n    }\n    \n    return &Server{\n        // Initialize server with options\n    }\n}"
    },
    {
      "name": "error_handling",
      "description": "Handle errors according to Go's idiomatic approach",
      "guidelines": [
        "Always check errors and handle them appropriately",
        "Return errors rather than using panic/recover for normal error flows",
        "Create custom error types for specific error cases",
        "Use errors.Is() and errors.As() for error comparison",
        "Wrap errors with context using fmt.Errorf with the %w verb",
        "Error strings should not be capitalized or end with punctuation",
        "Error messages should provide context but avoid redundant information",
        "Return early on errors to avoid deep nesting",
        "Use sentinel errors for expected error conditions",
        "In top-level APIs, consider converting errors to a common format"
      ],
      "example": "// Custom error with wrapping\ntype NotFoundError struct {\n    ID string\n}\n\nfunc (e *NotFoundError) Error() string {\n    return fmt.Sprintf(\"resource with id %s not found\", e.ID)\n}\n\nfunc GetUser(id string) (*User, error) {\n    user, err := db.FindUser(id)\n    if err != nil {\n        // Wrap the error with context\n        return nil, fmt.Errorf(\"getting user: %w\", err)\n    }\n    if user == nil {\n        return nil, &NotFoundError{ID: id}\n    }\n    return user, nil\n}\n\n// Error checking with early return\nfunc ProcessUser(id string) error {\n    user, err := GetUser(id)\n    if err != nil {\n        return err  // Return early\n    }\n    \n    // Continue with processing\n    // ...\n    \n    return nil\n}"
    },
    {
      "name": "documentation",
      "description": "Document code thoroughly using Go's conventions",
      "guidelines": [
        "Every exported (public) function, type, constant, and variable must have a comment",
        "Comments for exported entities should start with the entity name",
        "Use full sentences with proper punctuation",
        "Include examples in documentation for complex functions",
        "Document package functionality in a package-level comment",
        "Use meaningful examples in documentation with proper output comments",
        "Document non-obvious behavior and edge cases",
        "For methods, only include the receiver name when necessary for clarification",
        "Keep comments up to date when code changes",
        "Use godoc format for documenting packages and functions"
      ],
      "example": "// Package userservice provides functionality for managing users.\n// It handles creation, retrieval, and authentication of user accounts.\npackage userservice\n\n// User represents a registered user in the system.\ntype User struct {\n    ID        string\n    Email     string\n    CreatedAt time.Time\n}\n\n// NewUser creates a new user with the provided email.\n// It returns an error if the email is invalid or already exists.\nfunc NewUser(email string) (*User, error) {\n    // Implementation\n}\n\n// Authenticate verifies a user's credentials and returns\n// a session token if successful. It returns an error if\n// authentication fails.\nfunc Authenticate(email, password string) (string, error) {\n    // Implementation\n}"
    },
    {
      "name": "testing",
      "description": "Follow Go's testing best practices",
      "guidelines": [
        "Write table-driven tests for testing multiple scenarios",
        "Use subtests for organizing related test cases",
        "Test both happy paths and error cases",
        "Use testify/assert or testify/require for more expressive assertions",
        "Keep test code clean and maintainable",
        "Use meaningful test names that describe the behavior being tested",
        "Create test helpers for common setup and teardown",
        "Use interfaces for mocking dependencies",
        "Aim for at least 80% test coverage",
        "Use gomock or testify/mock for generating mocks",
        "Use httptest for testing HTTP handlers",
        "Use benchmarks for performance-critical code",
        "Place tests in the same package as the code being tested with _test.go suffix"
      ],
      "example": "func TestUserCreate(t *testing.T) {\n    // Table-driven test\n    tests := []struct {\n        name     string\n        email    string\n        wantErr  bool\n        errMsg   string\n    }{\n        {\n            name:    \"Valid email\",\n            email:   \"test@example.com\",\n            wantErr: false,\n        },\n        {\n            name:    \"Invalid email\",\n            email:   \"invalid-email\",\n            wantErr: true,\n            errMsg:  \"invalid email format\",\n        },\n        {\n            name:    \"Empty email\",\n            email:   \"\",\n            wantErr: true,\n            errMsg:  \"email cannot be empty\",\n        },\n    }\n    \n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            user, err := NewUser(tt.email)\n            \n            if tt.wantErr {\n                assert.Error(t, err)\n                assert.Contains(t, err.Error(), tt.errMsg)\n                assert.Nil(t, user)\n            } else {\n                assert.NoError(t, err)\n                assert.NotNil(t, user)\n                assert.Equal(t, tt.email, user.Email)\n            }\n        })\n    }\n}"
    },
    {
      "name": "concurrency",
      "description": "Use Go's concurrency features safely and effectively",
      "guidelines": [
        "Prefer channels for communication between goroutines",
        "Use select for handling multiple channels",
        "Always use mutexes for shared memory access",
        "Consider sync.WaitGroup for waiting on multiple goroutines",
        "Use context for cancellation and timeouts",
        "Beware of goroutine leaks - ensure all goroutines can exit",
        "Consider using errgroup for handling errors from multiple goroutines",
        "Use buffered channels when appropriate to prevent blocking",
        "Prefer sync.Once for one-time initialization",
        "Use sync.Pool for frequently allocated and released items",
        "Consider worker pools for limiting concurrency",
        "Document concurrent access requirements for exported types"
      ],
      "example": "// Worker pool pattern\nfunc ProcessItems(items []Item) error {\n    ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n    defer cancel()\n    \n    const maxWorkers = 5\n    itemsCh := make(chan Item, len(items))\n    errCh := make(chan error, 1)\n    \n    // Start workers\n    var wg sync.WaitGroup\n    for i := 0; i < maxWorkers; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            for item := range itemsCh {\n                if err := processItem(ctx, item); err != nil {\n                    select {\n                    case errCh <- err:\n                        // Error sent\n                    default:\n                        // Error channel already has an error\n                    }\n                    return\n                }\n            }\n        }()\n    }\n    \n    // Send items to workers\n    for _, item := range items {\n        select {\n        case itemsCh <- item:\n            // Item sent\n        case <-ctx.Done():\n            return ctx.Err()\n        case err := <-errCh:\n            return err\n        }\n    }\n    \n    close(itemsCh)\n    \n    // Wait for workers to finish\n    doneCh := make(chan struct{})\n    go func() {\n        wg.Wait()\n        close(doneCh)\n    }()\n    \n    // Wait for completion or error\n    select {\n    case <-doneCh:\n        return nil\n    case <-ctx.Done():\n        return ctx.Err()\n    case err := <-errCh:\n        return err\n    }\n}"
    },
    {
      "name": "performance",
      "description": "Optimize performance following Go idioms",
      "guidelines": [
        "Profile before optimizing",
        "Use strings.Builder for string concatenation",
        "Pre-allocate slices when capacity is known (make([]T, 0, capacity))",
        "Avoid unnecessary allocations",
        "Use pointers judiciously; prefer values for small structs",
        "Use sync.Pool for frequently allocated objects",
        "Minimize copying large objects",
        "Batch database operations",
        "Use efficient data structures (e.g., map for lookups)",
        "Use buffer pools for I/O operations",
        "Consider the sync/atomic package for simple shared state",
        "Use caching for expensive operations"
      ],
      "example": "// Efficient string building\nfunc BuildReport(items []Item) string {\n    // Pre-allocate StringBuilder with estimated capacity\n    var sb strings.Builder\n    sb.Grow(len(items) * 20) // Estimate 20 bytes per item\n    \n    sb.WriteString(\"Report:\\n\")\n    for _, item := range items {\n        fmt.Fprintf(&sb, \"- %s: $%.2f\\n\", item.Name, item.Price)\n    }\n    \n    return sb.String()\n}\n\n// Pre-allocate slice\nfunc FilterItems(items []Item, predicate func(Item) bool) []Item {\n    // Pre-allocate result slice with same capacity\n    result := make([]Item, 0, len(items))\n    \n    for _, item := range items {\n        if predicate(item) {\n            result = append(result, item)\n        }\n    }\n    \n    return result\n}"
    },
    {
      "name": "dependency_management",
      "description": "Manage dependencies effectively",
      "guidelines": [
        "Use Go modules for dependency management",
        "Vendor dependencies for reproducible builds if needed",
        "Specify minimum version constraints in go.mod",
        "Regularly update dependencies for security fixes",
        "Avoid depending on forked versions of packages",
        "Keep dependencies minimal and focused",
        "Consider stability when choosing dependencies",
        "Use go.sum for dependency verification",
        "Run 'go mod tidy' to clean up unused dependencies",
        "Pin versions for stability in production code",
        "Document external dependencies in README"
      ],
      "example": "// Example go.mod file\nmodule github.com/example/myproject\n\ngo 1.19\n\nrequire (\n    github.com/gin-gonic/gin v1.8.1\n    github.com/go-sql-driver/mysql v1.7.0\n    github.com/golang-jwt/jwt/v4 v4.5.0\n    github.com/stretchr/testify v1.8.2\n    go.uber.org/zap v1.24.0\n)\n\n// Example command for updating dependencies\n// $ go get -u ./...\n// $ go mod tidy"
    },
    {
      "name": "linting",
      "description": "Use linters to enforce code quality",
      "guidelines": [
        "Use golangci-lint as a comprehensive linting tool",
        "Configure linting rules in .golangci.yml",
        "Enable gofmt for standard formatting",
        "Enable govet for detecting suspicious constructs",
        "Enable staticcheck for static analysis",
        "Enable errcheck to ensure errors are handled",
        "Enable gosec for security-related issues",
        "Enable golint or revive for style checks",
        "Enable gocyclo to detect complex functions",
        "Enable misspell to catch spelling errors",
        "Enable unused to detect unused code",
        "Run linters in CI/CD pipelines",
        "Use // nolint comments sparingly and with justification"
      ],
      "example": "# .golangci.yml example\nrun:\n  timeout: 5m\n\nlinters:\n  enable:\n    - gofmt\n    - govet\n    - errcheck\n    - staticcheck\n    - gosec\n    - revive\n    - gocyclo\n    - misspell\n    - unused\n    - gosimple\n    - bodyclose\n    - goconst\n    - unparam\n\noutput:\n  format: colored-line-number\n\nlinters-settings:\n  gocyclo:\n    min-complexity: 15\n  revive:\n    rules:\n      - name: exported\n        disabled: false\n        arguments:\n          - \"disableStutteringCheck\"\n  errcheck:\n    check-type-assertions: true\n  govet:\n    check-shadowing: true"
    },
    {
      "name": "formatting",
      "description": "Follow Go's standard formatting practices",
      "guidelines": [
        "Always run gofmt or goimports on code before committing",
        "Use tabs for indentation (standard in Go)",
        "Limit line length to 100-120 characters for readability",
        "Group imports into stdlib, external, and internal",
        "Avoid long parameter lists",
        "Align struct fields and constant declarations for readability",
        "Use blank lines to separate logical sections of code",
        "Format error handling consistently (prefer early returns)",
        "Use gofumpt for stricter formatting (optional)",
        "Consistently position braces (Go standard: same line)"
      ],
      "example": "// Formatted imports\nimport (\n    \"context\"\n    \"fmt\"\n    \"io\"\n    \n    \"github.com/pkg/errors\"\n    \"go.uber.org/zap\"\n    \n    \"github.com/myorg/myproject/internal/config\"\n)\n\n// Aligned struct definition\ntype Server struct {\n    Name         string\n    Port         int\n    ReadTimeout  time.Duration\n    WriteTimeout time.Duration\n    Handler      http.Handler\n    Logger       *zap.Logger\n}\n\n// Early return error handling\nfunc ProcessRequest(ctx context.Context, req *Request) (*Response, error) {\n    if req == nil {\n        return nil, errors.New(\"nil request\")\n    }\n    \n    user, err := getUser(ctx, req.UserID)\n    if err != nil {\n        return nil, fmt.Errorf(\"get user: %w\", err)\n    }\n    \n    // Process the request with user\n    return &Response{}, nil\n}"
    },
    {
      "name": "security",
      "description": "Follow security best practices",
      "guidelines": [
        "Never hardcode secrets or credentials",
        "Use secure cryptographic libraries",
        "Implement proper input validation",
        "Use prepared statements for database queries",
        "Set appropriate timeouts for HTTP clients and servers",
        "Implement proper authentication and authorization",
        "Use secure random number generation (crypto/rand)",
        "Validate and sanitize all user input",
        "Use constant-time comparisons for sensitive data (crypto/subtle)",
        "Implement proper error handling that doesn't leak sensitive information",
        "Use TLS for all network communications",
        "Regularly update dependencies for security fixes"
      ],
      "example": "// Secure password hashing\nfunc HashPassword(password string) (string, error) {\n    hash, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)\n    if err != nil {\n        return \"\", fmt.Errorf(\"generating password hash: %w\", err)\n    }\n    return string(hash), nil\n}\n\n// Secure random token generation\nfunc GenerateToken(length int) (string, error) {\n    b := make([]byte, length)\n    if _, err := rand.Read(b); err != nil {\n        return \"\", fmt.Errorf(\"generating random bytes: %w\", err)\n    }\n    return base64.URLEncoding.EncodeToString(b), nil\n}\n\n// SQL injection prevention\nfunc GetUserByID(ctx context.Context, db *sql.DB, id string) (*User, error) {\n    // Use prepared statement with placeholder\n    row := db.QueryRowContext(ctx, \"SELECT id, name, email FROM users WHERE id = ?\", id)\n    \n    var user User\n    if err := row.Scan(&user.ID, &user.Name, &user.Email); err != nil {\n        if err == sql.ErrNoRows {\n            return nil, errors.New(\"user not found\")\n        }\n        return nil, fmt.Errorf(\"querying user: %w\", err)\n    }\n    \n    return &user, nil\n}"
    },
    {
      "name": "comments_and_godoc",
      "description": "Write effective comments and documentation",
      "guidelines": [
        "Write comments that explain why, not what (the code shows what)",
        "Use godoc format for package, type, and function documentation",
        "Include examples for non-obvious functions",
        "Use clear, complete sentences",
        "Document exported symbols comprehensively",
        "Keep comments accurate and up-to-date with code changes",
        "Use // TODO: or // FIXME: prefixes for temporary code or known issues",
        "Add context to complex algorithms or design decisions",
        "Use informative package documentation",
        "Document concurrency safety and requirements"
      ],
      "example": "// Package cache provides a thread-safe in-memory caching mechanism\n// with support for expiration, max entries, and custom eviction policies.\npackage cache\n\n// Cache is a thread-safe in-memory cache with expiring entries.\n// All methods are safe for concurrent use.\ntype Cache struct {\n    // fields...\n}\n\n// New creates a new Cache with the provided options.\n//\n// Example:\n//\n//     cache := New(\n//         WithMaxEntries(1000),\n//         WithDefaultExpiration(5 * time.Minute),\n//     )\n//\n// The resulting cache is safe for concurrent use.\nfunc New(options ...Option) *Cache {\n    // implementation\n}\n\n// Get retrieves an entry from the cache by key.\n// It returns the cached value and a boolean indicating\n// whether the key was found.\nfunc (c *Cache) Get(key string) (interface{}, bool) {\n    // implementation\n}"
    },
    {
      "name": "project_structure",
      "description": "Follow standard Go project structure",
      "guidelines": [
        "Organize your project according to the Standard Go Project Layout",
        "Use /cmd directory for main applications",
        "Use /internal for private application code",
        "Use /pkg for public library code",
        "Place all Go code under /cmd, /internal, or /pkg",
        "Use /api for API definitions (Swagger, Protocol Buffers)",
        "Use /configs for configuration file templates",
        "Use /scripts for build and deployment scripts",
        "Use /test for additional test data and tools",
        "Keep the root main.go minimal if used",
        "Use /docs for documentation",
        "Keep related files together in the same package"
      ],
      "example": "project/\n├── README.md\n├── go.mod\n├── go.sum\n├── api/                # API definitions (OpenAPI, Protocol Buffers)\n├── cmd/                # Main applications\n│   ├── server/         # API server application\n│   │   └── main.go\n│   └── cli/            # CLI application\n│       └── main.go\n├── configs/            # Configuration files\n├── docs/               # Documentation\n├── internal/           # Private code\n│   ├── auth/           # Authentication package\n│   ├── db/             # Database access\n│   ├── server/         # Internal server implementation\n│   └── handler/        # HTTP handlers\n├── pkg/                # Public libraries\n│   ├── models/         # Data models\n│   └── utils/          # Utility functions\n├── scripts/            # Build and CI/CD scripts\n└── test/               # Additional test files and tools"
    }
  ],
  "tools": [
    {
      "name": "go vet",
      "purpose": "Examines code for common mistakes"
    },
    {
      "name": "gofmt/goimports",
      "purpose": "Standard code formatting"
    },
    {
      "name": "golangci-lint",
      "purpose": "Fast, comprehensive linting"
    },
    {
      "name": "gotest",
      "purpose": "Test runner"
    },
    {
      "name": "staticcheck",
      "purpose": "Advanced static analysis"
    },
    {
      "name": "gosec",
      "purpose": "Security-focused linter"
    },
    {
      "name": "gocyclo",
      "purpose": "Cyclomatic complexity analysis"
    },
    {
      "name": "errcheck",
      "purpose": "Error handling verification"
    },
    {
      "name": "gopls",
      "purpose": "Official Go language server"
    },
    {
      "name": "go mod",
      "purpose": "Dependency management"
    },
    {
      "name": "gotests",
      "purpose": "Test boilerplate generation"
    },
    {
      "name": "delve",
      "purpose": "Go debugger"
    }
  ],
  "lsp_settings": {
    "gopls": {
      "usePlaceholders": true,
      "completeUnimported": true,
      "staticcheck": true,
      "matcher": "fuzzy",
      "analyses": {
        "unusedparams": true,
        "shadow": true,
        "nilness": true,
        "unusedwrite": true,
        "useany": true
      },
      "codelenses": {
        "gc_details": false,
        "generate": true,
        "regenerate_cgo": false,
        "test": true,
        "tidy": true,
        "upgrade_dependency": true,
        "vendor": true
      },
      "hints": {
        "assignVariableTypes": true,
        "compositeLiteralFields": true,
        "compositeLiteralTypes": true,
        "constantValues": true,
        "functionTypeParameters": true,
        "parameterNames": true,
        "rangeVariableTypes": true
      },
      "formatting": {
        "gofumpt": true
      }
    }
  }
}